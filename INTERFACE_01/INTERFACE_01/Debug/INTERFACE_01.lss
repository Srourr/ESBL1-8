
INTERFACE_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091a  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065a  00000000  00000000  00000c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b3  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e3  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b7  00000000  00000000  00001b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPortDirection>:
			switch(Port_ID)
			{	
				case PORTA: Clear_Bit(PA_Data , PIN_id); break;
				case PORTB: Clear_Bit(PB_Data , PIN_id); break;
				case PORTC: Clear_Bit(PC_Data , PIN_id); break;
				case PORTD: Clear_Bit(PD_Data , PIN_id); break;
  6c:	61 30       	cpi	r22, 0x01	; 1
  6e:	a1 f4       	brne	.+40     	; 0x98 <DIO_SetPortDirection+0x2c>
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	49 f0       	breq	.+18     	; 0x86 <DIO_SetPortDirection+0x1a>
  74:	28 f0       	brcs	.+10     	; 0x80 <DIO_SetPortDirection+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	49 f0       	breq	.+18     	; 0x8c <DIO_SetPortDirection+0x20>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	51 f0       	breq	.+20     	; 0x92 <DIO_SetPortDirection+0x26>
  7e:	08 95       	ret
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a bb       	out	0x1a, r24	; 26
  84:	08 95       	ret
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	87 bb       	out	0x17, r24	; 23
  8a:	08 95       	ret
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	84 bb       	out	0x14, r24	; 20
  90:	08 95       	ret
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	81 bb       	out	0x11, r24	; 17
  96:	08 95       	ret
  98:	61 11       	cpse	r22, r1
  9a:	0f c0       	rjmp	.+30     	; 0xba <DIO_SetPortDirection+0x4e>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	41 f0       	breq	.+16     	; 0xb0 <DIO_SetPortDirection+0x44>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPortDirection+0x40>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	39 f0       	breq	.+14     	; 0xb4 <DIO_SetPortDirection+0x48>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	39 f0       	breq	.+14     	; 0xb8 <DIO_SetPortDirection+0x4c>
  aa:	08 95       	ret
  ac:	1a ba       	out	0x1a, r1	; 26
  ae:	08 95       	ret
  b0:	17 ba       	out	0x17, r1	; 23
  b2:	08 95       	ret
  b4:	14 ba       	out	0x14, r1	; 20
  b6:	08 95       	ret
  b8:	11 ba       	out	0x11, r1	; 17
  ba:	08 95       	ret

000000bc <DIO_SetPinDirection>:
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	08 f0       	brcs	.+2      	; 0xc2 <DIO_SetPinDirection+0x6>
  c0:	72 c0       	rjmp	.+228    	; 0x1a6 <DIO_SetPinDirection+0xea>
  c2:	67 30       	cpi	r22, 0x07	; 7
  c4:	08 f0       	brcs	.+2      	; 0xc8 <DIO_SetPinDirection+0xc>
  c6:	6f c0       	rjmp	.+222    	; 0x1a6 <DIO_SetPinDirection+0xea>
  c8:	41 30       	cpi	r20, 0x01	; 1
  ca:	a1 f5       	brne	.+104    	; 0x134 <DIO_SetPinDirection+0x78>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	89 f0       	breq	.+34     	; 0xf2 <DIO_SetPinDirection+0x36>
  d0:	28 f0       	brcs	.+10     	; 0xdc <DIO_SetPinDirection+0x20>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	c9 f0       	breq	.+50     	; 0x108 <DIO_SetPinDirection+0x4c>
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	11 f1       	breq	.+68     	; 0x11e <DIO_SetPinDirection+0x62>
  da:	08 95       	ret
  dc:	2a b3       	in	r18, 0x1a	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDirection+0x2c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDirection+0x28>
  ec:	82 2b       	or	r24, r18
  ee:	8a bb       	out	0x1a, r24	; 26
  f0:	08 95       	ret
  f2:	27 b3       	in	r18, 0x17	; 23
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_SetPinDirection+0x42>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_SetPinDirection+0x3e>
 102:	82 2b       	or	r24, r18
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SetPinDirection+0x58>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SetPinDirection+0x54>
 118:	82 2b       	or	r24, r18
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	08 95       	ret
 11e:	21 b3       	in	r18, 0x11	; 17
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDirection+0x6e>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDirection+0x6a>
 12e:	82 2b       	or	r24, r18
 130:	81 bb       	out	0x11, r24	; 17
 132:	08 95       	ret
 134:	41 11       	cpse	r20, r1
 136:	37 c0       	rjmp	.+110    	; 0x1a6 <DIO_SetPinDirection+0xea>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	91 f0       	breq	.+36     	; 0x160 <DIO_SetPinDirection+0xa4>
 13c:	28 f0       	brcs	.+10     	; 0x148 <DIO_SetPinDirection+0x8c>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	d9 f0       	breq	.+54     	; 0x178 <DIO_SetPinDirection+0xbc>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	29 f1       	breq	.+74     	; 0x190 <DIO_SetPinDirection+0xd4>
 146:	08 95       	ret
 148:	2a b3       	in	r18, 0x1a	; 26
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPinDirection+0x98>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPinDirection+0x94>
 158:	80 95       	com	r24
 15a:	82 23       	and	r24, r18
 15c:	8a bb       	out	0x1a, r24	; 26
 15e:	08 95       	ret
 160:	27 b3       	in	r18, 0x17	; 23
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_SetPinDirection+0xb0>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_SetPinDirection+0xac>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	87 bb       	out	0x17, r24	; 23
 176:	08 95       	ret
 178:	24 b3       	in	r18, 0x14	; 20
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_SetPinDirection+0xc8>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_SetPinDirection+0xc4>
 188:	80 95       	com	r24
 18a:	82 23       	and	r24, r18
 18c:	84 bb       	out	0x14, r24	; 20
 18e:	08 95       	ret
 190:	21 b3       	in	r18, 0x11	; 17
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_SetPinDirection+0xe0>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_SetPinDirection+0xdc>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	81 bb       	out	0x11, r24	; 17
 1a6:	08 95       	ret

000001a8 <DIO_GetPinInput>:
}

DIO_value DIO_GetPinInput(DIO_PORTID Port_ID	,	DIO_PIN_ID PIN_id	)				    //getting the input value of specific pin in specific port
{
	DIO_value Pin_State;
			if (	(Port_ID <= PORTD) && (PIN_id <= PIN7)	)
 1a8:	84 30       	cpi	r24, 0x04	; 4
 1aa:	88 f5       	brcc	.+98     	; 0x20e <DIO_GetPinInput+0x66>
 1ac:	67 30       	cpi	r22, 0x07	; 7
 1ae:	78 f5       	brcc	.+94     	; 0x20e <DIO_GetPinInput+0x66>
			{
					switch(Port_ID)
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	81 f0       	breq	.+32     	; 0x1d4 <DIO_GetPinInput+0x2c>
 1b4:	28 f0       	brcs	.+10     	; 0x1c0 <DIO_GetPinInput+0x18>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	b9 f0       	breq	.+46     	; 0x1e8 <DIO_GetPinInput+0x40>
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	f9 f0       	breq	.+62     	; 0x1fc <DIO_GetPinInput+0x54>
 1be:	27 c0       	rjmp	.+78     	; 0x20e <DIO_GetPinInput+0x66>
					{
						case PORTA: Pin_State = GET_Bit(PA_Stat , PIN_id); break;
 1c0:	89 b3       	in	r24, 0x19	; 25
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_GetPinInput+0x22>
 1c6:	95 95       	asr	r25
 1c8:	87 95       	ror	r24
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_GetPinInput+0x1e>
 1ce:	98 2f       	mov	r25, r24
 1d0:	91 70       	andi	r25, 0x01	; 1
 1d2:	1d c0       	rjmp	.+58     	; 0x20e <DIO_GetPinInput+0x66>
						case PORTB: Pin_State = GET_Bit(PB_Stat , PIN_id); break;
 1d4:	86 b3       	in	r24, 0x16	; 22
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_GetPinInput+0x36>
 1da:	95 95       	asr	r25
 1dc:	87 95       	ror	r24
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_GetPinInput+0x32>
 1e2:	98 2f       	mov	r25, r24
 1e4:	91 70       	andi	r25, 0x01	; 1
 1e6:	13 c0       	rjmp	.+38     	; 0x20e <DIO_GetPinInput+0x66>
						case PORTC: Pin_State = GET_Bit(PC_Stat , PIN_id); break;
 1e8:	83 b3       	in	r24, 0x13	; 19
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_GetPinInput+0x4a>
 1ee:	95 95       	asr	r25
 1f0:	87 95       	ror	r24
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_GetPinInput+0x46>
 1f6:	98 2f       	mov	r25, r24
 1f8:	91 70       	andi	r25, 0x01	; 1
 1fa:	09 c0       	rjmp	.+18     	; 0x20e <DIO_GetPinInput+0x66>
						case PORTD: Pin_State = GET_Bit(PD_Stat , PIN_id); break;
 1fc:	80 b3       	in	r24, 0x10	; 16
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_GetPinInput+0x5e>
 202:	95 95       	asr	r25
 204:	87 95       	ror	r24
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_GetPinInput+0x5a>
 20a:	98 2f       	mov	r25, r24
 20c:	91 70       	andi	r25, 0x01	; 1
					}
			}
			
			
			return Pin_State;
}
 20e:	89 2f       	mov	r24, r25
 210:	08 95       	ret

00000212 <LED>:
#include "Types.h"
#include "DIO.h"

 void LED()
 {
	 DIO_SetPortDirection(PORTA , Output);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPortDirection>
	 DIO_SetPinDirection(PORTC	,PIN1	,Input);
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 5e 00 	call	0xbc	; 0xbc <DIO_SetPinDirection>
	 
	 if (DIO_GetPinInput(PORTC , PIN1)) PA_Data = ~(PA_Data);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DIO_GetPinInput>
 22c:	88 23       	and	r24, r24
 22e:	19 f0       	breq	.+6      	; 0x236 <LED+0x24>
 230:	8b b3       	in	r24, 0x1b	; 27
 232:	80 95       	com	r24
 234:	8b bb       	out	0x1b, r24	; 27
 236:	08 95       	ret

00000238 <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		LED();	
 238:	0e 94 09 01 	call	0x212	; 0x212 <LED>
 23c:	fd cf       	rjmp	.-6      	; 0x238 <main>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
